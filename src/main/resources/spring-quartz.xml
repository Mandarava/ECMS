<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    
    <bean id="quartzNonCluster"
          class="org.springframework.scheduling.quartz.SchedulerFactoryBean"/>
    
    <bean id="quartzExceptionSchedulerListener"
          class="com.finance.quartz.listener.QuartzExceptionSchedulerListener"/>
    
    <bean class="com.finance.quartz.quartz22.SchedulerBeanPostProcessor"/>
    
    <!-- 定时器集群配置 -->
    <!-- 调度工厂 -->
    <bean id="quartzCluster"
          class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.scheduler.instanceName">QuartzScheduler</prop>
                <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
                <!-- 线程池配置 -->
                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
                <!-- thread数量，不会动态增长(所有的JOB) -->
                <prop key="org.quartz.threadPool.threadCount">20</prop>
                <!-- thread优先级 -->
                <prop key="org.quartz.threadPool.threadPriority">5</prop>
                <!-- JobStore 配置 -->
                <prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
                <prop key="org.quartz.jobStore.driverDelegateClass">
                    org.quartz.impl.jdbcjobstore.StdJDBCDelegate
                </prop>
                <!-- 是否是应用在集群中，当应用在集群中时必须设置为TRUE，否则会出错 -->
                <prop key="org.quartz.jobStore.isClustered">true</prop>
                <!-- scheduler的checkin时间，时间长短影响failure scheduler的发现速度 -->
                <prop key="org.quartz.jobStore.clusterCheckinInterval">15000</prop>
                <!-- jobStore处理未按时触发的Job的数量 -->
                <prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime">5</prop>
                <!-- 最大能忍受的触发超时时间，如果超过则认为“失误” -->
                <prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
                
                <prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
                <prop key="org.quartz.plugin.triggHistory.class">
                    org.quartz.plugins.history.LoggingTriggerHistoryPlugin
                </prop>
                <prop key="org.quartz.plugin.triggHistory.triggerFiredMessage">
                    Trigger {1}.{0} fired job {6}.{5} at: {4, date, yyyy/MM/dd HH:mm:ss.SSS}. Next
                    scheduled at: {3, date,yyyy/MM/dd HH:mm:ss.SSS}
                </prop>
                <prop key="org.quartz.plugin.triggHistory.triggerCompleteMessage">
                    Trigger {1}.{0} completed firing job {6}.{5} at {4, date, yyyy/MM/dd
                    HH:mm:ss.SSS} with resulting trigger instruction code: {8} -> {9}, re-fire
                    count:{7}. Next scheduled at: {3, date, yyyy/MM/dd HH:mm:ss.SSS}
                </prop>
                <prop key="org.quartz.plugin.triggHistory.triggerMisfiredMessage">
                    Trigger {1}.{0} misfired job {6}.{5} at: {4, date, yyyy/MM/dd HH:mm:ss.SSS}.
                    Should have fired at: {3, date, yyyy/MM/dd HH:mm:ss.SSS}
                </prop>
                <prop key="org.quartz.plugin.shutdownhook.class">
                    org.quartz.plugins.management.ShutdownHookPlugin
                </prop>
                <prop key="org.quartz.plugin.shutdownhook.cleanShutdown">true</prop>
            </props>
        
        </property>
        
        <property name="schedulerName" value="QuartzScheduler"/>
        
        <!--必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 -->
        <property name="startupDelay" value="30"/>
        
        <!-- APPLICATION_CONTEXT_KEY的值是第一个XML中配置的值，通过getApplicationContext方法传入quartz的context即可获取ApplicationContext上下文，进而获取对应的bean -->
        <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
        
        <!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
        <property name="overwriteExistingJobs" value="true"/>
        
        <!-- 设置自动启动 -->
        <property name="autoStartup" value="true"/>
        
        <!-- 注册触发器 -->
        <!-- <property name="triggers">
             <list>
                 <ref bean="trigger_hello_world"/>
             </list>
         </property>-->
        
        <property name="schedulerListeners">
            <list>
                <ref bean="quartzExceptionSchedulerListener"/>
            </list>
        </property>
    </bean>


</beans>